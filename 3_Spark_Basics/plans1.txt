== Parsed Logical Plan ==
'Union false, false
:- Project [rank#0, name#1, net_worth#18, bday#3, age#4, nationality#25]
:  +- Filter isnotnull(age#4)
:     +- Join Inner, (nationality#25 = country#12)
:        :- Project [rank#0, name#1, net_worth#18, bday#3, age#4, CASE WHEN (nationality#5 = United States of America) THEN United States WHEN (nationality#5 = French) THEN France WHEN (nationality#5 = England) THEN United Kingdom ELSE nationality#5 END AS nationality#25]
:        :  +- Filter (net_worth#18 > 60)
:        :     +- Project [rank#0, name#1, cast(regexp_extract(net_worth#2, ^\$(\d+).*$, 1) as int) AS net_worth#18, bday#3, age#4, nationality#5]
:        :        +- Relation[rank#0,name#1,net_worth#2,bday#3,age#4,nationality#5] csv
:        +- Relation[country#12,num_billionares#13,billionaire_per_million#14] csv
+- Filter (nationality#61 = Russia)
   +- Relation[rank#56,name#57,net_worth#58,bday#59,age#60,nationality#61] parquet

== Analyzed Logical Plan ==
rank: int, name: string, net_worth: string, bday: string, age: int, nationality: string
Union false, false
:- Project [rank#0, name#1, cast(net_worth#18 as string) AS net_worth#68, bday#3, age#4, nationality#25]
:  +- Project [rank#0, name#1, net_worth#18, bday#3, age#4, nationality#25]
:     +- Filter isnotnull(age#4)
:        +- Join Inner, (nationality#25 = country#12)
:           :- Project [rank#0, name#1, net_worth#18, bday#3, age#4, CASE WHEN (nationality#5 = United States of America) THEN United States WHEN (nationality#5 = French) THEN France WHEN (nationality#5 = England) THEN United Kingdom ELSE nationality#5 END AS nationality#25]
:           :  +- Filter (net_worth#18 > 60)
:           :     +- Project [rank#0, name#1, cast(regexp_extract(net_worth#2, ^\$(\d+).*$, 1) as int) AS net_worth#18, bday#3, age#4, nationality#5]
:           :        +- Relation[rank#0,name#1,net_worth#2,bday#3,age#4,nationality#5] csv
:           +- Relation[country#12,num_billionares#13,billionaire_per_million#14] csv
+- Project [rank#56, name#57, net_worth#58, bday#59, age#60, nationality#61]
   +- Filter (nationality#61 = Russia)
      +- Relation[rank#56,name#57,net_worth#58,bday#59,age#60,nationality#61] parquet

== Optimized Logical Plan ==
Union false, false
:- Project [rank#0, name#1, cast(net_worth#18 as string) AS net_worth#68, bday#3, age#4, nationality#25]
:  +- Join Inner, (nationality#25 = country#12)
:     :- Project [rank#0, name#1, cast(regexp_extract(net_worth#2, ^\$(\d+).*$, 1) as int) AS net_worth#18, bday#3, age#4, CASE WHEN (nationality#5 = United States of America) THEN United States WHEN (nationality#5 = French) THEN France WHEN (nationality#5 = England) THEN United Kingdom ELSE nationality#5 END AS nationality#25]
:     :  +- Filter (((isnotnull(net_worth#2) AND (cast(regexp_extract(net_worth#2, ^\$(\d+).*$, 1) as int) > 60)) AND isnotnull(age#4)) AND isnotnull(CASE WHEN (nationality#5 = United States of America) THEN United States WHEN (nationality#5 = French) THEN France WHEN (nationality#5 = England) THEN United Kingdom ELSE nationality#5 END))
:     :     +- Relation[rank#0,name#1,net_worth#2,bday#3,age#4,nationality#5] csv
:     +- Project [country#12]
:        +- Filter isnotnull(country#12)
:           +- Relation[country#12,num_billionares#13,billionaire_per_million#14] csv
+- Filter (isnotnull(nationality#61) AND (nationality#61 = Russia))
   +- Relation[rank#56,name#57,net_worth#58,bday#59,age#60,nationality#61] parquet

== Physical Plan ==
Union
:- *(2) Project [rank#0, name#1, cast(net_worth#18 as string) AS net_worth#68, bday#3, age#4, nationality#25]
:  +- *(2) BroadcastHashJoin [nationality#25], [country#12], Inner, BuildRight, false
:     :- *(2) Project [rank#0, name#1, cast(regexp_extract(net_worth#2, ^\$(\d+).*$, 1) as int) AS net_worth#18, bday#3, age#4, CASE WHEN (nationality#5 = United States of America) THEN United States WHEN (nationality#5 = French) THEN France WHEN (nationality#5 = England) THEN United Kingdom ELSE nationality#5 END AS nationality#25]
:     :  +- *(2) Filter (((isnotnull(net_worth#2) AND (cast(regexp_extract(net_worth#2, ^\$(\d+).*$, 1) as int) > 60)) AND isnotnull(age#4)) AND isnotnull(CASE WHEN (nationality#5 = United States of America) THEN United States WHEN (nationality#5 = French) THEN France WHEN (nationality#5 = England) THEN United Kingdom ELSE nationality#5 END))
:     :     +- FileScan csv [rank#0,name#1,net_worth#2,bday#3,age#4,nationality#5] Batched: false, DataFilters: [isnotnull(net_worth#2), (cast(regexp_extract(net_worth#2, ^\$(\d+).*$, 1) as int) > 60), isnotnu..., Format: CSV, Location: InMemoryFileIndex[file:/home/hello/projects/spark_demo_course_task/3_Spark_Basics/data/top_100_ri..., PartitionFilters: [], PushedFilters: [IsNotNull(net_worth), IsNotNull(age)], ReadSchema: struct<rank:int,name:string,net_worth:string,bday:string,age:int,nationality:string>
:     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, false]),false), [id=#109]
:        +- *(1) Filter isnotnull(country#12)
:           +- FileScan csv [country#12] Batched: false, DataFilters: [isnotnull(country#12)], Format: CSV, Location: InMemoryFileIndex[file:/home/hello/projects/spark_demo_course_task/3_Spark_Basics/data/wiki_numbe..., PartitionFilters: [], PushedFilters: [IsNotNull(country)], ReadSchema: struct<country:string>
+- *(3) ColumnarToRow
   +- FileScan parquet [rank#56,name#57,net_worth#58,bday#59,age#60,nationality#61] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex[file:/home/hello/projects/spark_demo_course_task/3_Spark_Basics/data_parquet], PartitionFilters: [isnotnull(nationality#61), (nationality#61 = Russia)], PushedFilters: [], ReadSchema: struct<rank:int,name:string,net_worth:string,bday:string,age:int>
